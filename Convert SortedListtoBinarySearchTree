//Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    ListNode* getMiddle(ListNode* head)
    {
        ListNode* fast = head;
        ListNode* slow = head;
        ListNode* prev = slow;
        while(fast->next != NULL && fast->next->next != NULL)
        {
            fast = fast->next->next;
            prev = slow;
            slow = slow->next;
            
        }
        return prev;
    }
    TreeNode* sortedListToBST(ListNode* head) {
        //find the middle of linked list, 
        //then this will be root,
        //then sortedListToBST for left and right of middle point
        //then middle->left = left; middle->right = right
        
        if(head == NULL ) return NULL;
        if(head->next == NULL ) return new TreeNode(head->val);
        
        //here is the node before middle point
        ListNode* prev_middle = getMiddle(head);
        ListNode* middle = prev_middle->next;
        TreeNode* right = sortedListToBST(middle->next);
        prev_middle->next = NULL;
        TreeNode* left = sortedListToBST(head);
        
        TreeNode* middle_node = new TreeNode(middle->val);
        middle_node->left = left;
        middle_node->right = right;
        
        return middle_node;
    }
};
