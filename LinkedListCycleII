Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Note: Do not modify the linked list.

Follow up:
Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        //fast pointer moves 2 steps each time
        //slow pointer move 1 step each time
        //when they met. means there is a loop
        //now have another pointer start from head, slow moves at the same time
        //when these two met, it is the beginning of loop
        if(head == NULL || head->next == NULL) return NULL;
        ListNode* fast = head;
        ListNode* slow = head;
        
        while(fast != NULL && fast->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            if(fast == slow) break;
        }
        if(fast == NULL || fast->next == NULL) return NULL;
        
        ListNode* start = head;
        while(start != slow)
        {
            start = start->next;
            slow = slow->next;
        }
        
        return start;
        
    }
};
