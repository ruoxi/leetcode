//A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

//Return a deep copy of the list.



/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
 //eg a->b->c->d->e
 //   a->a->c->c->d->d->e->e
 //then add random pointers
 //then take out the duplicate
class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(head == NULL) return head;
        
        RandomListNode* pos1 = head;
        RandomListNode* pos2 = head->next;
        
        //first create a copy of each node
        while(pos1 != NULL)
        {
            RandomListNode* copy = new RandomListNode(pos1->label);
            pos1->next = copy;
            pos1->next->next = pos2;
            
            pos1 = pos2;
            if(pos2 != NULL)
            {
                pos2= pos2->next;
            }
        }
        
        //then iterate through the new list and add random pointers for copied node
        pos1 = head;
        pos2 = pos1->next;
        
        while(pos1 != NULL )
        {
            if(pos1->random)
            {
                pos2->random = pos1->random->next;
            }
            pos1 = pos1->next->next;
            if(pos1 != NULL)
                pos2 = pos1->next;
        }
        
        //now move the copied node to a new linked list
        RandomListNode dummy(0);
        pos1 = head;
        pos2 = head->next;
        dummy.next = pos2;
        
        while(pos1 != NULL && pos1->next->next != NULL)
        {
            pos1->next = pos1->next->next;
            pos2->next = pos2->next->next;
            pos1 = pos1->next;
            pos2 = pos2->next;
        }
        
        pos1->next = NULL;
        pos2->next = NULL;
        
        return dummy.next;
  
    }
};
