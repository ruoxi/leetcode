//Given a linked list, determine if it has a cycle in it.

//Follow up:
//Can you solve it without using extra space?

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        //use fast and slow pointers
        //if they met, then it has cycle
        if(head == NULL || head->next == NULL) return false;
        
        ListNode* fast = head;
        ListNode* slow = head;
        
        while(fast->next != NULL && fast->next->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            
            if(slow == fast)
            {
                return true;
            }
        }
        return false;
    }
};
