//Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

//For example,
//Given 1->2->3->3->4->4->5, return 1->2->5.
//Given 1->1->1->2->3, return 2->3.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        
        if(head == NULL || head->next == NULL) return head;
        ListNode dummy(0);
        dummy.next = head;
        
        ListNode *ins = &dummy;
        ListNode *prev = dummy.next;
        ListNode *cur = prev->next;
        
        while(cur != NULL)
        {
            int value = prev->val;
            if(value == cur->val)
            {
                while( cur != NULL && value == cur->val)
                {
                    cur = cur->next;
                }
                ins->next = cur;
                prev = ins->next;
                if(cur == NULL) return dummy.next;
                cur = cur->next;
            }
            else
            {
                ins = prev;
                prev = cur;
                cur = cur->next;
                
            }
            
        }
        return dummy.next;
    }
};
