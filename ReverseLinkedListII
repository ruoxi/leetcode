//Reverse a linked list from position m to n. Do it in-place and in one-pass.

//For example:
//Given 1->2->3->4->5->NULL, m = 2 and n = 4,

//return 1->4->3->2->5->NULL.

//Note:
//Given m, n satisfy the following condition:
//1 ≤ m ≤ n ≤ length of list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode dummy(0);
        dummy.next = head;
        ListNode* cur = &dummy;
        ListNode*prev = &dummy;
        for(int i = 0; i < m; i++)
        {
            prev = cur;
            cur = cur->next;
        }
        
        //now cur is the starting point, 
        while(n > m)
        {
            ListNode* move = cur->next;
            cur->next = move->next;
            move->next = prev->next;
            prev->next = move;
            n--;
        }
        
        return dummy.next;
        
    }
};
