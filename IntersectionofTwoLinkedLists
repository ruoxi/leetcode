//Write a program to find the node at which the intersection of two singly linked lists begins.


//For example, the following two linked lists:

//A:          a1 → a2
//                   ↘
//                     c1 → c2 → c3
//                   ↗            
//B:     b1 → b2 → b3
//begin to intersect at node c1.


//Notes:

//If the two linked lists have no intersection at all, return null.
//The linked lists must retain their original structure after the function returns.
//You may assume there are no cycles anywhere in the entire linked structure.
//Your code should preferably run in O(n) time and use only O(1) memory.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    int get_length(ListNode* head)
    {
        int length = 0;
        while(head != NULL)
        {
            length++;
            head = head->next;
        }
        return length;
    }

    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        //calculate the length of list A and list B
        //La-Lb is the number of steps that A needs to move ahead of B
        
        if(headA == NULL || headB == NULL) return NULL;
        
        int LengthA = get_length(headA);
        int LengthB = get_length(headB);

        if(LengthA > LengthB)
        {
            for(int i = 0; i < LengthA-LengthB; i++)
            {
                headA = headA->next;
            }
        }
        else
        {
            for(int i = 0; i < LengthB- LengthA; i++)
            {
                headB = headB->next;
            }
        }
        
        //now move headA and headB at the same time
        while(headA != headB)
        {
            headA = headA->next;
            headB = headB->next;
            
        }
        
        return headA;
        
    }
};
