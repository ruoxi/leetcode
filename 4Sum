//Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

//Note:
//Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
//The solution set must not contain duplicate quadruplets.
//    For example, given array S = {1 0 -1 0 -2 2}, and target = 0.

//    A solution set is:
//    (-1,  0, 0, 1)
//    (-2, -1, 1, 2)
//    (-2,  0, 0, 2)


//Runtime O(n^3)
//Space
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        if(nums.size() == 0 ) return res;
        sort(nums.begin(), nums.end());
        int n = nums.size();
        for(int i = 0; i< n-3 ; i++)
        {
            if(i >0 && nums[i] == nums[i-1]) continue;
            

            for(int j = i+1; j < n-2; j++)
            {
                if(j > i+1 && nums[j] == nums[j-1]) continue;
                int sum = target - nums[i] - nums[j];
                
                int start = j+1, end = n-1;
                while(start < end)
                {
                    int s = nums[start] + nums[end];
                    if(s == sum)
                    {
                        vector<int> set;
                        set.push_back(nums[i]);
                        set.push_back(nums[j]);
                        set.push_back(nums[start]);
                        set.push_back(nums[end]);
                        res.push_back(set);
                        start++, end--;
                        while(start < end && nums[start] == nums[start-1]) start++;
                        while(start < end && nums[end] == nums[end+1]) end--;
                    }
                    else if(s >sum)
                    {
                        end--;
                    }
                    else
                    {
                        start++;
                    }
                }
            }
        }
        return res;
    }
};
