//Sort a linked list in O(n log n) time using constant space complexity.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //merge sort: find the middle point of the input, then sort the left side and right side, finally merge them
 //O(n)  = nlogn
 
class Solution {
public:

    ListNode* findMiddle(ListNode *head)
    {
        //use fast and slow pointer
        ListNode* fast = head;
        ListNode* slow = head;
        while(fast->next != NULL && fast->next->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
            
        }
        
        return slow;
    }
    
    ListNode *merge(ListNode* head1, ListNode* head2)
    {

        ListNode dummy(0);
        ListNode* cur = &dummy;
        while(head1 != NULL && head2 != NULL)
        {
            if(head1->val < head2->val)
            {
                cur->next = head1;
                head1 = head1->next;
            }
            else
            {
                cur->next = head2;
                head2 = head2->next;
            }
            cur = cur->next;
        }
        
        if(head1 != NULL) cur->next = head1;
        if(head2 != NULL) cur->next = head2;
        
        return dummy.next;
        
    
        
    }
    ListNode* sortList(ListNode* head) {
        if(head == NULL || head->next ==NULL) return head;
        
        ListNode* middle = findMiddle(head);
        
        ListNode* right = sortList(middle->next);
        middle->next = NULL;
        ListNode* left = sortList(head);
        
        //then merge
        return merge(left, right);
    }
};
