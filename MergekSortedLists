//Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 //Runtime nlogk
 //space k
 //n is number of nodes
 //Priority queues are a type of container adaptors, specifically designed such that its first element is always the greatest of
 //the elements it contains, according to some strict weak ordering criterion.
 //idea is to push nodes to priority queue, and add it to result
class MyCompare {
public:
    bool operator()(ListNode* a, ListNode* b) {
        return a->val > b->val; //node here is ">", in this way to top of queue is the smallest value
    }
};

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode dummy(0);
        priority_queue<ListNode*, vector<ListNode*>, MyCompare> q;
        
        for(int i = 0; i < lists.size(); i++)
        {
            if(lists[i]) q.push(lists[i]);
        }
        
        ListNode* cur = &dummy;
        while(!q.empty())
        {
            ListNode* node = q.top();
            q.pop();
            cur->next = node;
            cur = cur->next;
            if(node->next != NULL) q.push(node->next);
        }
        
        return dummy.next;
    }
};
