1213. Intersection of Three Sorted Arrays
Easy

64

4

Add to List

Share
Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.

 

Example 1:

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.
 

Constraints:

1 <= arr1.length, arr2.length, arr3.length <= 1000
1 <= arr1[i], arr2[i], arr3[i] <= 2000


class Solution {
public:
    vector<int> arraysIntersection(vector<int>& arr1, vector<int>& arr2, vector<int>& arr3) {
        
        int ptr1 = 0, ptr2 = 0, ptr3 = 0;
        int arr1_size = arr1.size();
        int arr2_size = arr2.size();
        int arr3_size = arr3.size();
        
        vector<int> result;
        while(ptr1 < arr1_size && ptr2 < arr2_size && ptr3 < arr3_size) {
            if( arr1[ptr1] == arr2[ptr2] && arr2[ptr2] == arr3[ptr3]) {
                result.push_back(arr1[ptr1]);
            }
            int min_value = min(arr1[ptr1], min(arr2[ptr2], arr3[ptr3]));
            if (arr1[ptr1] == min_value) ptr1++;
            if (arr2[ptr2] == min_value) ptr2++;
            if (arr3[ptr3] == min_value) ptr3++;
        }
        return result;
    }
};
