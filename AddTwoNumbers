//You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

//Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
//Output: 7 -> 0 -> 8

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode res(0);
        int carry = 0;
        ListNode *cur = &res;
        while(l1 != NULL || l2 != NULL)
        {
            int sum = carry;
            if (l1 != NULL)
            {
                sum += l1->val;
                l1 = l1->next;
            }
            if(l2 != NULL)
            {
                sum += l2->val;
                l2 = l2->next;
            }
            
            carry = sum / 10;
            ListNode* digit = new ListNode(sum % 10);
            cur->next = digit;
            cur = cur->next;

            
        }
        
        if(carry > 0)
        {
            ListNode *digit = new ListNode(carry);
            cur->next = digit;
        }
        
        return res.next;
        
    }
};
