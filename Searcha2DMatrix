//Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

//Integers in each row are sorted from left to right.
//The first integer of each row is greater than the last integer of the previous row.
//For example,

//Consider the following matrix:

//[
//  [1,   3,  5,  7],
//  [10, 11, 16, 20],
//  [23, 30, 34, 50]
//]
//Given target = 3, return true.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        if(matrix.size() == 0 || matrix.at(0).size() == 0) return false;
        
        int nRow = matrix.size();
        int nCol = matrix.at(0).size();
        if(target < matrix[0][0] || target > matrix[nRow - 1][nCol- 1]) {
            return false;
        }
        //first search through first col
        int row_start = 0, row_end = nRow-1;
        while(row_start <= row_end)
        {
            int mid = (row_start+row_end)/2;
            if(matrix[mid][0] == target) return true;
            else if(matrix[mid][0] > target)
            {
                row_end = mid-1;
            }
            else
            {
                if(matrix[mid][nCol-1] == target ) return true;
                else if(matrix[mid][nCol-1] > target) 
                {
                    //search col
                    int col_start = 0, col_end = nCol-1;
                    while(col_start <= col_end)
                    {
                        int col_mid = (col_start + col_end)/2;
                        if(matrix[mid][col_mid] == target) return true;
                        else if(matrix[mid][col_mid] < target)
                        {
                            col_start = col_mid+1;
                        }
                        else
                        {
                            col_end = col_mid-1;
                        }
                    }
                    return false;
                }
  
                row_start = mid+1;
                
            }
        }
        
        return false;
        
    }
};
